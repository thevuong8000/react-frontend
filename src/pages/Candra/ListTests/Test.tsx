/* eslint-disable no-unused-vars */
import {
  AccordionButton,
  AccordionItem,
  AccordionPanel,
  Button,
  Flex,
  Text,
  Textarea,
  Tooltip
} from '@chakra-ui/react';
import useNotify from '@hooks/useNotify';
import { isStringEqual } from '@utilities/helper';
import React, { ChangeEventHandler, FC, MouseEventHandler, useEffect } from 'react';
import { MdDelete } from 'react-icons/md';
import { VscRunAll } from 'react-icons/vsc';
import TestResult, { ITestResultStatus } from './TestResult';

export type ExecutionStatus = 'Not Started' | 'Started' | 'Finished' | ITestResultStatus;

interface ITestBase {
  input: string;
  expectedOutput: string;

  // output generated by the code
  output: string;
}

export interface ITestCase extends ITestBase {
  id: string;
  isCollapsed: boolean;
  executionStatus: ExecutionStatus;
}

export interface ITest {
  test: ITestCase;
  handleOnChange: (id: string, newTest: ITestCase) => void;
  handleOnRemove: (id: string) => void;
  handleOnRunSingleTest: (id: string) => void;
}

const Test: FC<ITest> = ({ test, handleOnChange, handleOnRemove, handleOnRunSingleTest }) => {
  const { setNotifier } = useNotify();

  const _handleOnChange: ChangeEventHandler<HTMLTextAreaElement> = (e) => {
    const { name, value } = e.target;

    // Remove output if test content is changed
    const newTest: ITestCase = {
      ...test,
      output: '',
      executionStatus: 'Not Started',
      [name]: value
    };
    handleOnChange(test.id, newTest);
  };

  const _handleOnOutputChange: ChangeEventHandler<HTMLTextAreaElement> = () => {
    setNotifier({
      title: 'Output Change Warning',
      description: 'Output is not expected to be changed by users',
      id: 'test-output-change-warning',
      status: 'error'
    });
  };

  const _handleOnCollapseToggle: MouseEventHandler<HTMLButtonElement> = (e) => {
    const newTest: ITestCase = { ...test, isCollapsed: !test.isCollapsed };
    handleOnChange(test.id, newTest);
  };

  const _handleSetExecutionStatus = (status: ExecutionStatus) => {
    const newTest: ITestCase = { ...test, executionStatus: status };
    handleOnChange(test.id, newTest);
  };

  const _handleRunSingleTest: MouseEventHandler<HTMLButtonElement> = (e) => {
    e.stopPropagation();
    handleOnRunSingleTest(test.id);
  };

  const _handleRemoveTest: MouseEventHandler<HTMLButtonElement> = (e) => {
    e.stopPropagation();
    handleOnRemove(test.id);
  };

  useEffect(() => {
    if (test.executionStatus === 'Finished') {
      if (isStringEqual(test.expectedOutput, test.output)) _handleSetExecutionStatus('Accepted');
      else _handleSetExecutionStatus('Wrong Answer');
    }
  }, [test]);

  return (
    <AccordionItem>
      <AccordionButton onClick={_handleOnCollapseToggle}>
        {/* Test Toolbar */}
        <Flex w="100%" direction="row" mb={1} justify="space-between">
          <Flex>
            <Flex w="9rem" align="start">
              <Text mr="2">Test #{test.id}</Text>
            </Flex>

            <Tooltip label="Run this test">
              <Button variant="ghost" colorScheme="green" onClick={_handleRunSingleTest}>
                <VscRunAll size="22" />
              </Button>
            </Tooltip>

            <Tooltip label="Remove this test">
              <Button variant="ghost" colorScheme="red" onClick={_handleRemoveTest}>
                <MdDelete size="22" />
              </Button>
            </Tooltip>
          </Flex>
          <Flex pl="2" pr="2" align="center">
            <TestResult result={test.executionStatus} />
          </Flex>
        </Flex>
      </AccordionButton>

      {/* Test Content */}
      <AccordionPanel>
        <Flex direction="row" w="100%" gridGap="3" h="48">
          <Textarea
            name="input"
            w="60%"
            h="100%"
            resize="none"
            placeholder="Input..."
            value={test.input}
            onChange={_handleOnChange}
            size="lg"
          />
          <Flex grow={1} direction="column" h="100%" gridGap="3">
            <Textarea
              name="expectedOutput"
              h="100%"
              w="100%"
              resize="none"
              placeholder="Expected Output..."
              value={test.expectedOutput}
              onChange={_handleOnChange}
              size="md"
            />
            <Textarea
              h="100%"
              w="100%"
              resize="none"
              placeholder="Output..."
              value={test.output}
              onChange={_handleOnOutputChange}
              size="md"
            />
          </Flex>
        </Flex>
      </AccordionPanel>
    </AccordionItem>
  );
};

export default Test;
