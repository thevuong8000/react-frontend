import {
  AccordionButton,
  AccordionItem,
  AccordionPanel,
  Button,
  Flex,
  Spinner,
  Text,
  Textarea,
  Tooltip
} from '@chakra-ui/react';
import React, { ChangeEventHandler, FC, MouseEventHandler, useEffect, useState } from 'react';
import { MdDelete } from 'react-icons/md';
import { VscRunAll } from 'react-icons/vsc';
import TestResult, { ITestResultStatus } from './TestResult';

export interface ICodeTestContent {
  input: string;
  expectedOutput: string;

  // output generated by code
  output: string;

  isCollapsed: boolean;
  isExecuting?: boolean;
}

export interface ICodeTest {
  test: ICodeTestContent;
  id: number;
  handleOnChange: (id: ICodeTest['id'], newTest: ICodeTestContent) => void;
  handleOnRemove: (id: ICodeTest['id']) => void;
}

const CodeTest: FC<ICodeTest> = ({ test, id, handleOnChange, handleOnRemove }) => {
  const [testResult, setTestResult] = useState<Nullable<ITestResultStatus>>(null);

  const _handleOnChange: ChangeEventHandler<HTMLTextAreaElement> = (e) => {
    const { name, value } = e.target;

    // Remove output if test content is changed
    const newTest: ICodeTestContent = { ...test, output: '', [name]: value };
    handleOnChange(id, newTest);
  };

  const _handleOnCollapseToggle: MouseEventHandler<HTMLButtonElement> = (e) => {
    const newTest: ICodeTestContent = { ...test, isCollapsed: !test.isCollapsed };
    handleOnChange(id, newTest);
  };

  const _handleRunSingleTest: MouseEventHandler<HTMLButtonElement> = (e) => {
    e.stopPropagation();
    console.log('Run test', id);
  };

  const _handleRemoveTest: MouseEventHandler<HTMLButtonElement> = (e) => {
    e.stopPropagation();
    handleOnRemove(id);
  };

  useEffect(() => {
    if (test.output) {
      if (test.expectedOutput === test.output) setTestResult('Accepted');
      else setTestResult('Wrong Answer');
    } else setTestResult(null);
  }, [test]);

  return (
    <AccordionItem>
      <AccordionButton onClick={_handleOnCollapseToggle}>
        {/* Test Toolbar */}
        <Flex direction="row" mb={1}>
          <Text mr="2">Test #{id}</Text>

          <Tooltip label="Run this test">
            <Button variant="ghost" colorScheme="green" onClick={_handleRunSingleTest}>
              <VscRunAll size="22" />
            </Button>
          </Tooltip>

          <Tooltip label="Remove this test">
            <Button variant="ghost" colorScheme="red" onClick={_handleRemoveTest}>
              <MdDelete size="22" />
            </Button>
          </Tooltip>
          {test.isExecuting && (
            <Flex pl="2" pr="2" align="center">
              <Spinner size="sm" speed="0.8s" color="blue.500" />
            </Flex>
          )}
        </Flex>

        {/* Test Result */}
        {testResult && !test.isExecuting && (
          <Flex>
            <TestResult result={testResult} />
          </Flex>
        )}
      </AccordionButton>

      {/* Test Content */}
      <AccordionPanel>
        <Flex direction="row" w="100%" gridGap="3" h="48">
          <Textarea
            name="input"
            w="60%"
            h="100%"
            resize="none"
            placeholder="Input..."
            value={test.input}
            onChange={_handleOnChange}
            size="lg"
          />
          <Flex grow={1} direction="column" h="100%" gridGap="3">
            <Textarea
              name="expectedOutput"
              h="100%"
              w="100%"
              resize="none"
              placeholder="Expected Output..."
              value={test.expectedOutput}
              onChange={_handleOnChange}
              size="md"
            />
            <Textarea
              h="100%"
              w="100%"
              resize="none"
              placeholder="Corrected Output..."
              defaultValue={test.output}
              readOnly
              size="md"
            />
          </Flex>
        </Flex>
      </AccordionPanel>
    </AccordionItem>
  );
};

export default CodeTest;
